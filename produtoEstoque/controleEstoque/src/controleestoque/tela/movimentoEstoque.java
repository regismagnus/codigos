/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * movimentoEstoque.java
 *
 * Created on 18/03/2013, 22:30:05
 */

package controleestoque.tela;

import controleestoque.bean.produtoEntity;
import controleestoque.bean.produtoMovimentoEntity;
import controleestoque.crud.produtoDAO;
import controleestoque.crud.produtoMovimentoDAO;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;

import controleestoque.util.BotaoTabela;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author re
 */
public class movimentoEstoque extends javax.swing.JDialog {


    private DefaultTableModel model;
    private produtoDAO produtoDAO;
    private produtoEntity produtoEntity;
    private List<produtoEntity> all = new ArrayList<produtoEntity>();

    private Thread thread;
    private boolean stop = true;
    private listar listar;

    private Integer ultimaCelula[] = new Integer[2];
    /** Creates new form movimentoEstoque */
    public movimentoEstoque(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        produtoDAO = new produtoDAO();
        produtoEntity = new produtoEntity();

         model = new DefaultTableModel(){
            public boolean isCellEditable(int row, int col) {
                if (col == 2 || col == 4 || col == 5) {
                    return false;
                } else {
                    return true;
                }
            }
 };
        jTable1.setModel(model);
        model.addColumn("");
        model.addColumn("Código");
        model.addColumn("Descrição");
        model.addColumn("Qtda.");
        model.addColumn("Pr. Unidade");
        model.addColumn("Total");

        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(20);
        jTable1.getColumnModel().getColumn(1).setMinWidth(100);
        jTable1.getColumnModel().getColumn(2).setMinWidth(200);
        jTable1.getColumnModel().getColumn(3).setMinWidth(100);
        jTable1.getColumnModel().getColumn(4).setMinWidth(100);
        jTable1.getColumnModel().getColumn(5).setMinWidth(100);
        //jTable1.setDefaultEditor(Object.class, null);

        BotaoTabela botaoTabela = new BotaoTabela(jTable1,0);

        model.setNumRows(2);
        jTable1.setRowHeight(20);
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JPOperacao = new javax.swing.JPanel();
        JRBEntrada = new javax.swing.JRadioButton();
        JRBSaida = new javax.swing.JRadioButton();
        JPObservacao = new javax.swing.JPanel();
        JLObservacao = new javax.swing.JLabel();
        JTFObservacao = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        JPGeral = new javax.swing.JPanel();
        JBGravar = new javax.swing.JButton();
        JBFim = new javax.swing.JButton();
        JLTotal = new javax.swing.JLabel();
        JLValor = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Movimento de Estoque");
        setResizable(false);

        JPOperacao.setBorder(javax.swing.BorderFactory.createTitledBorder("Operação"));

        JRBEntrada.setText("1- Entrada");
        JRBEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JRBEntradaActionPerformed(evt);
            }
        });

        JRBSaida.setText("2- Saída");
        JRBSaida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JRBSaidaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JPOperacaoLayout = new javax.swing.GroupLayout(JPOperacao);
        JPOperacao.setLayout(JPOperacaoLayout);
        JPOperacaoLayout.setHorizontalGroup(
            JPOperacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPOperacaoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JPOperacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JRBEntrada)
                    .addComponent(JRBSaida))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        JPOperacaoLayout.setVerticalGroup(
            JPOperacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPOperacaoLayout.createSequentialGroup()
                .addComponent(JRBEntrada)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JRBSaida))
        );

        JPObservacao.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        JLObservacao.setText("Observação:");

        javax.swing.GroupLayout JPObservacaoLayout = new javax.swing.GroupLayout(JPObservacao);
        JPObservacao.setLayout(JPObservacaoLayout);
        JPObservacaoLayout.setHorizontalGroup(
            JPObservacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPObservacaoLayout.createSequentialGroup()
                .addComponent(JLObservacao)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JTFObservacao, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(94, Short.MAX_VALUE))
        );
        JPObservacaoLayout.setVerticalGroup(
            JPObservacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPObservacaoLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(JPObservacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLObservacao)
                    .addComponent(JTFObservacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        JPGeral.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        JBGravar.setText("Gravar");
        JBGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBGravarActionPerformed(evt);
            }
        });

        JBFim.setText("Fim");
        JBFim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBFimActionPerformed(evt);
            }
        });

        JLTotal.setFont(new java.awt.Font("Tahoma", 0, 14));
        JLTotal.setText("Total:");

        JLValor.setFont(new java.awt.Font("Tahoma", 0, 14));
        JLValor.setText("R$ 0,00");

        javax.swing.GroupLayout JPGeralLayout = new javax.swing.GroupLayout(JPGeral);
        JPGeral.setLayout(JPGeralLayout);
        JPGeralLayout.setHorizontalGroup(
            JPGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPGeralLayout.createSequentialGroup()
                .addComponent(JBGravar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JBFim, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 249, Short.MAX_VALUE)
                .addComponent(JLTotal)
                .addGap(67, 67, 67)
                .addComponent(JLValor)
                .addGap(83, 83, 83))
        );
        JPGeralLayout.setVerticalGroup(
            JPGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JBGravar, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
            .addGroup(JPGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(JBFim, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                .addComponent(JLValor)
                .addComponent(JLTotal))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(JPGeral, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(JPOperacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JPObservacao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(JPOperacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(JPObservacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(17, 17, 17)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JPGeral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

        jTable1.editCellAt(jTable1.getSelectedRow(), jTable1.getSelectedColumn());

        if(jTable1.getSelectedColumn() == 0){
           listar = new listar((JFrame) this.getParent(), true);
            listar.selecionar();
            stop = false;
            start();
            listar.show();

        }
        try {
            thread.sleep(100);
        } catch (InterruptedException ex) {
            Logger.getLogger(movimentoEstoque.class.getName()).log(Level.SEVERE, null, ex);
        }
        inclusaoTabela();

    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed

        
    }//GEN-LAST:event_jTable1KeyPressed

    private void JBGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBGravarActionPerformed
        salvar();
    }//GEN-LAST:event_JBGravarActionPerformed

    private void JBFimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBFimActionPerformed
        this.dispose();
    }//GEN-LAST:event_JBFimActionPerformed

    private void JRBEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JRBEntradaActionPerformed
       
        JRBEntrada.setSelected(true);
        JRBSaida.setSelected(false);

    }//GEN-LAST:event_JRBEntradaActionPerformed

    private void JRBSaidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JRBSaidaActionPerformed
        
        JRBSaida.setSelected(true);
        JRBEntrada.setSelected(false);

    }//GEN-LAST:event_JRBSaidaActionPerformed

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
       if(evt.getKeyCode()==evt.VK_ENTER || evt.getKeyCode()==evt.VK_DOWN ||
                evt.getKeyCode()==evt.VK_LEFT || evt.getKeyCode()==evt.VK_RIGHT ||
                evt.getKeyCode()==evt.VK_UP){
            inclusaoTabela();
        }
       
    }//GEN-LAST:event_jTable1KeyReleased

    public void inclusaoTabela(){

        Double total = 0.0;

        for(int i = 0 ; i < jTable1.getRowCount(); i++){
            if(jTable1.getValueAt(i, 1)!=null && jTable1.getValueAt(i, 1).toString().equalsIgnoreCase("")){
                jTable1.setValueAt("", i, 1);
                jTable1.setValueAt("", i, 2);
                jTable1.setValueAt("", i, 3);
                jTable1.setValueAt("", i, 4);
                jTable1.setValueAt("", i, 5);
            }
           
                verificarIgual();
           
            ultimaCelula[0] = jTable1.getSelectedRow();
            ultimaCelula[1] = jTable1.getSelectedColumn();

            if(jTable1.getValueAt(i, 1)!=null && !jTable1.getValueAt(i, 1).toString().equalsIgnoreCase("")){
            try{
                produtoEntity = produtoDAO.listar(jTable1.getValueAt(i, 1).toString()).get(0);

            jTable1.setValueAt(produtoEntity.getDescricaoProduto(), i, 2);
            jTable1.setValueAt(new DecimalFormat().getCurrencyInstance(new Locale("pt","BR")).format(produtoEntity.getValorVenda()), i, 4);
            produtoEntity = null;
            }catch(IndexOutOfBoundsException ex){
                JOptionPane.showMessageDialog(null, "Produto não encontrado", "Erro", JOptionPane.ERROR_MESSAGE);
                jTable1.setValueAt("", i, 1);
                jTable1.setValueAt("", i, 2);
                jTable1.setValueAt("", i, 3);
                jTable1.setValueAt("", i, 4);
                jTable1.setValueAt("", i, 5);
            }
        }

        if(jTable1.getValueAt(i, 3)!=null && !jTable1.getValueAt(i, 3).toString().equalsIgnoreCase("")){

            try{
                total+= Integer.parseInt(jTable1.getValueAt(i, 3).toString()) * Double.parseDouble(jTable1.getValueAt(i, 4).toString().substring(3).replaceAll(",", "."));
                jTable1.setValueAt(new DecimalFormat().getCurrencyInstance(new Locale("pt","BR")).format(Integer.parseInt(jTable1.getValueAt(i, 3).toString()) * Double.parseDouble(jTable1.getValueAt(i, 4).toString().substring(3).replaceAll(",", "."))),i, 5);
            }catch(NumberFormatException ex){
                JOptionPane.showMessageDialog(null, "Erro na quantidade informada","Erro", JOptionPane.ERROR_MESSAGE);
                jTable1.setValueAt("", i, 3);
                jTable1.setValueAt("", i, 5);
            }catch(NullPointerException ex){
                JOptionPane.showMessageDialog(null, "Informe um produto primeiro.","Erro", JOptionPane.ERROR_MESSAGE);
                jTable1.setValueAt("", i, 3);
            }

        }
            
        }

        if(jTable1.getSelectedRow()==jTable1.getRowCount()-1){
            model.setNumRows(jTable1.getRowCount()+1);
        }
    
        JLValor.setText(new DecimalFormat().getCurrencyInstance(new Locale("pt","BR")).format(total));



    }

    public void start(){

		thread=new Thread(new Runnable(){
			public void run(){
				try{
				while(!stop){
                                    if(listar.getProdutoSelecionado().getId()!=null){
                                        jTable1.setValueAt(listar.getProdutoSelecionado().getId(),jTable1.getSelectedRow(), 1);
                                        stop = true;
                                        listar = null;
                                        thread.stop();
                                    }
                                    thread.sleep(100);
				}
			}catch(Exception e){
                                e.printStackTrace();
			}
                                
		}
        });
		thread.start();
	}

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                movimentoEstoque dialog = new movimentoEstoque(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JBFim;
    private javax.swing.JButton JBGravar;
    private javax.swing.JLabel JLObservacao;
    private javax.swing.JLabel JLTotal;
    private javax.swing.JLabel JLValor;
    private javax.swing.JPanel JPGeral;
    private javax.swing.JPanel JPObservacao;
    private javax.swing.JPanel JPOperacao;
    private javax.swing.JRadioButton JRBEntrada;
    private javax.swing.JRadioButton JRBSaida;
    private javax.swing.JTextField JTFObservacao;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void salvar() {

        produtoMovimentoDAO produtoMovimentoDAO = new produtoMovimentoDAO();
        produtoMovimentoEntity produtoMovimentoEntity;
        boolean salvo = false;

        if(!JRBEntrada.isSelected() && !JRBSaida.isSelected()){
            JOptionPane.showMessageDialog(null, "Selecione uma operação antes de gravar","Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        for(int i = 0; i < jTable1.getRowCount(); i++){
            if(jTable1.getValueAt(i, 1)!=null && !jTable1.getValueAt(i, 1).toString().equalsIgnoreCase("") && (jTable1.getValueAt(i, 3)==null || jTable1.getValueAt(i, 3).toString().equalsIgnoreCase(""))){
                jTable1.editCellAt(i, 3);
                JOptionPane.showMessageDialog(null, "Preencha a quantidade do produto " + jTable1.getValueAt(i, 2).toString(),"Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if(verificarQuantidade()){
            return;
        }

        for(int i = 0; i < jTable1.getRowCount(); i++){

            if(jTable1.getValueAt(i, 1)!=null && !jTable1.getValueAt(i, 1).toString().equalsIgnoreCase("")){

                produtoMovimentoEntity = new produtoMovimentoEntity();

                produtoMovimentoEntity.setId_Produto(Integer.parseInt(jTable1.getValueAt(i, 1).toString()));
                produtoMovimentoEntity.setDia(new Date());
                produtoMovimentoEntity.setObservacao(JTFObservacao.getText());
                produtoMovimentoEntity.setTipo(JRBEntrada.isSelected() ? 0:1);
                produtoMovimentoEntity.setQuantidade(Integer.parseInt(jTable1.getValueAt(i, 3).toString()));

                produtoMovimentoDAO.novo(produtoMovimentoEntity);
                produtoDAO.atualizarEstoque(produtoMovimentoEntity.getId_Produto().toString(), (produtoMovimentoEntity.getTipo()==1 ? "-"+produtoMovimentoEntity.getQuantidade() : "+"+produtoMovimentoEntity.getQuantidade()));

                produtoMovimentoEntity = null;
                salvo = true;
            }
       }
        if(salvo){
        JOptionPane.showMessageDialog(null, "Movimento do Estoque salvo.");
            this.dispose();
        }else{
        JOptionPane.showMessageDialog(null, "Nada foi salvo.");
        }
   }

    private boolean verificarQuantidade() {

        if(JRBEntrada.isSelected()){
            return false;
        }

        for(int i = 0; i < jTable1.getRowCount(); i++){
        if(jTable1.getValueAt(i, 1)!=null && !jTable1.getValueAt(i, 1).toString().equalsIgnoreCase("")){
            if(produtoDAO.verificarQuantidade(jTable1.getValueAt(i, 1).toString(),Integer.parseInt(jTable1.getValueAt(i, 3).toString()))){
                JOptionPane.showMessageDialog(null, "Quantidade maior que em estoque","Erro", JOptionPane.ERROR_MESSAGE);
                jTable1.editCellAt(i, 3);
                return true;
            }
        }
        }
        return false;
    }

    private void verificarIgual() {

        String codigo;

    if(ultimaCelula[0]!=null && ultimaCelula[1]!=null && (ultimaCelula[1]==1 || ultimaCelula[1]==0) && jTable1.getValueAt(ultimaCelula[0], 1)!=null && !jTable1.getValueAt(ultimaCelula[0], 1).toString().equalsIgnoreCase("")){

        codigo = jTable1.getValueAt(ultimaCelula[0], 1).toString();

        for(int i = 0; i < jTable1.getRowCount() -1; i++){

            if(ultimaCelula[0]!=i && jTable1.getValueAt(ultimaCelula[0], 1)!=null && !jTable1.getValueAt(ultimaCelula[0], 1).toString().equalsIgnoreCase("")){

                if(jTable1.getValueAt(i, 1)!=null && codigo.equalsIgnoreCase(jTable1.getValueAt(i, 1).toString())){
                    JOptionPane.showMessageDialog(null, "Produto já foi inserido", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    jTable1.setValueAt("", ultimaCelula[0], 1);
                    jTable1.setValueAt("", ultimaCelula[0], 2);
                    jTable1.setValueAt("", ultimaCelula[0], 3);
                    jTable1.setValueAt("", ultimaCelula[0], 4);
                    jTable1.setValueAt("", ultimaCelula[0], 5);
                    return;
                }

            }

        }
         ultimaCelula[0] = jTable1.getSelectedRow();
            ultimaCelula[1] = jTable1.getSelectedColumn();


    }

    }

}

